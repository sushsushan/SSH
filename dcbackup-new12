#!/bin/bash

# Define Colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
WHITE="\033[1;37m"
RESET="\033[0m"

# Fetch system details
USER=$(whoami)
SERVER=$(hostname)
DATE_TIME=$(date)

clear
printf "${GREEN}%-40s${RESET}\n" "Welcome to the Backup Tool"
printf "%-20s${CYAN}%s${RESET}\n" "User:" "$USER"
printf "%-20s${CYAN}%s${RESET}\n" "Server:" "$SERVER"
printf "%-20s${CYAN}%s${RESET}\n" "Date & Time:" "$DATE_TIME"
echo

# Variables to store previous responses
ARCHIVED=""
PARTITION=""
IGNORE_FLAG=""
EXCLUDE_FLAG=""
NOTIFY_FLAG=""
DOMAIN=""
PATH=""
FILE_PATH=""
DBNAME=""

while true; do
    echo
    [[ -z "$DOMAIN" ]] && read -p "Enter domain name: " DOMAIN

    while true; do
        echo -e "\n${YELLOW}Choose an option:${RESET}"
        printf " %-5s %s\n" "1)" "Confirm files"
        printf " %-5s %s\n" "2)" "View file"
        printf " %-5s %s\n" "3)" "Restore website"
        printf " %-5s %s\n" "4)" "Restore database"
        printf " %-5s %s\n" "5)" "Full restore"
        printf " %-5s %s\n" "6)" "Exit"
        read -p "Enter your choice: " OPTION

        case $OPTION in
            1)
                [[ -z "$PATH" ]] && read -p "Enter path: " PATH
                if [[ -z "$ARCHIVED" ]]; then
                    read -p "Is it archived? (y/n): " ARCHIVED
                    if [[ "$ARCHIVED" == "y" ]]; then
                        read -p "Enter partition number: " PARTITION
                        ARCHIVED_FLAG="--archived --partition=$PARTITION"
                    else
                        ARCHIVED_FLAG=""
                    fi
                fi
                RESULT_COMMANDS=(
                    "dclistfiles $USER daily $SERVER $PATH $ARCHIVED_FLAG"
                    "dclistfiles $USER weekly $SERVER $PATH $ARCHIVED_FLAG"
                    "dclistfiles $USER monthly $SERVER $PATH $ARCHIVED_FLAG"
                )
                ;;
            2)
                [[ -z "$FILE_PATH" ]] && read -p "Enter file path (e.g., public_html/wp-config.php): " FILE_PATH
                RESULT_COMMANDS=(
                    "dcviewfile $USER $SERVER daily $FILE_PATH"
                    "dcviewfile $USER $SERVER weekly $FILE_PATH"
                    "dcviewfile $USER $SERVER monthly $FILE_PATH"
                )
                ;;
            3)
                [[ -z "$PATH" ]] && read -p "Enter path to restore: " PATH
                if [[ -z "$IGNORE_FLAG" ]]; then
                    read -p "Ignore existing files? (y/n): " IGNORE
                    [[ "$IGNORE" == "y" ]] && IGNORE_FLAG="--ignore-existing"
                fi
                if [[ -z "$EXCLUDE_FLAG" ]]; then
                    read -p "Exclude any folders? (comma-separated, e.g., test,demo): " EXCLUDE
                    [[ -n "$EXCLUDE" ]] && EXCLUDE_FLAG="--exclude={'$EXCLUDE'}"
                fi
                if [[ -z "$ARCHIVED" ]]; then
                    read -p "Is it archived? (y/n): " ARCHIVED
                    if [[ "$ARCHIVED" == "y" ]]; then
                        read -p "Enter partition number: " PARTITION
                        ARCHIVED_FLAG="--archived --partition=$PARTITION"
                    else
                        ARCHIVED_FLAG=""
                    fi
                fi
                if [[ -z "$NOTIFY_FLAG" ]]; then
                    read -p "Notify email? (leave empty for none): " NOTIFY
                    [[ -n "$NOTIFY" ]] && NOTIFY_FLAG="--notify=$NOTIFY"
                fi
                RESULT_COMMANDS=(
                    "dcrestorepath $USER $SERVER daily $PATH $IGNORE_FLAG $EXCLUDE_FLAG $ARCHIVED_FLAG $NOTIFY_FLAG"
                    "dcrestorepath $USER $SERVER weekly $PATH $IGNORE_FLAG $EXCLUDE_FLAG $ARCHIVED_FLAG $NOTIFY_FLAG"
                    "dcrestorepath $USER $SERVER monthly $PATH $IGNORE_FLAG $EXCLUDE_FLAG $ARCHIVED_FLAG $NOTIFY_FLAG"
                )
                ;;
            4)
                [[ -z "$DBNAME" ]] && read -p "Enter database name: " DBNAME
                if [[ -z "$ARCHIVED" ]]; then
                    read -p "Is it archived? (y/n): " ARCHIVED
                    if [[ "$ARCHIVED" == "y" ]]; then
                        read -p "Enter partition number: " PARTITION
                        ARCHIVED_FLAG="--archived --partition=$PARTITION"
                    else
                        ARCHIVED_FLAG=""
                    fi
                fi
                RESULT_COMMANDS=(
                    "dcrestoremysqldb $USER $SERVER daily $DBNAME $ARCHIVED_FLAG"
                    "dcrestoremysqldb $USER $SERVER weekly $DBNAME $ARCHIVED_FLAG"
                    "dcrestoremysqldb $USER $SERVER monthly $DBNAME $ARCHIVED_FLAG"
                )
                ;;
            5)
                if [[ -z "$ARCHIVED" ]]; then
                    read -p "Is it archived? (y/n): " ARCHIVED
                    if [[ "$ARCHIVED" == "y" ]]; then
                        read -p "Enter partition number: " PARTITION
                        ARCHIVED_FLAG="--archived --partition=$PARTITION"
                    else
                        ARCHIVED_FLAG=""
                    fi
                fi
                if [[ -z "$NOTIFY_FLAG" ]]; then
                    read -p "Notify email? (leave empty for none): " NOTIFY
                    [[ -n "$NOTIFY" ]] && NOTIFY_FLAG="--notify=$NOTIFY"
                fi
                RESULT_COMMANDS=(
                    "dcfulldatarestore $USER daily $SERVER $ARCHIVED_FLAG $NOTIFY_FLAG"
                    "dcfulldatarestore $USER weekly $SERVER $ARCHIVED_FLAG $NOTIFY_FLAG"
                    "dcfulldatarestore $USER monthly $SERVER $ARCHIVED_FLAG $NOTIFY_FLAG"
                    "dcbackuprestore $USER daily $SERVER"
                    "dcbackuprestore $USER weekly $SERVER"
                    "dcbackuprestore $USER monthly $SERVER"
                    "dcbackuprestore $USER latam $SERVER"
                )
                ;;
            6)
                echo -e "${GREEN}Exiting backup tool. Goodbye!${RESET}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option! Please try again.${RESET}"
                continue
                ;;
        esac

        clear
        echo -e "\n${GREEN}Generated commands:${RESET}"
        for cmd in "${RESULT_COMMANDS[@]}"; do
            printf " %s\n" "$cmd"
        done

        echo -e "\n${YELLOW}Do you want to choose another option? (y/n)${RESET}"
        read -p "Enter choice: " CONTINUE
        [[ "$CONTINUE" != "y" ]] && break
    done
done
