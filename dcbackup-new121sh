#!/bin/bash

# Define Colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
CYAN="\033[1;36m"
RESET="\033[0m"

# Function to list domains
list_domains() {
    DOMAINS=("example.com" "mywebsite.net" "testsite.org")

    echo -e "${YELLOW}Available domains:${RESET}"
    for i in "${!DOMAINS[@]}"; do
        echo "$((i+1))) ${DOMAINS[i]}"
    done
    echo "$(( ${#DOMAINS[@]} + 1 ))) Search for another domain"
}

# Function to reset all stored inputs
reset_data() {
    DOMAIN=""
    ARCHIVED=""
    PARTITION=""
    IGNORE_FLAG=""
    EXCLUDE_FLAG=""
    NOTIFY_FLAG=""
    PATH=""
    FILE_PATH=""
    DBNAME=""
}

# Initial setup
reset_data
while true; do
    clear
    echo -e "${GREEN}Welcome to the Backup Tool${RESET}"
    echo -e "User: ${CYAN}$(whoami)${RESET}"
    echo -e "Server: ${CYAN}$(hostname)${RESET}"
    echo -e "Date & Time: ${CYAN}$(date)${RESET}"
    echo

    # Ask for domain selection
    while [[ -z "$DOMAIN" ]]; do
        list_domains
        read -p "Enter domain number or type manually: " CHOICE
        if [[ "$CHOICE" =~ ^[0-9]+$ ]]; then
            if (( CHOICE > 0 && CHOICE <= ${#DOMAINS[@]} )); then
                DOMAIN="${DOMAINS[CHOICE-1]}"
            elif (( CHOICE == ${#DOMAINS[@]} + 1 )); then
                reset_data
                read -p "Enter a new domain manually: " DOMAIN
            else
                echo -e "${RED}Invalid choice! Try again.${RESET}"
            fi
        else
            DOMAIN="$CHOICE"
        fi
    done

    # Main menu loop
    while true; do
        echo -e "\n${YELLOW}Choose an option:${RESET}"
        echo "1) Confirm files"
        echo "2) View file"
        echo "3) Restore website"
        echo "4) Restore database"
        echo "5) Full restore"
        echo "6) Search for another domain"
        echo "7) Exit"
        read -p "Enter your choice: " OPTION

        case $OPTION in
            1)
                [[ -z "$PATH" ]] && read -p "Enter path: " PATH
                if [[ -z "$ARCHIVED" ]]; then
                    read -p "Is it archived? (y/n): " ARCHIVED
                    [[ "$ARCHIVED" == "y" ]] && read -p "Enter partition number: " PARTITION
                fi
                RESULT_COMMANDS=(
                    "dclistfiles $USER daily $SERVER $PATH"
                    "dclistfiles $USER weekly $SERVER $PATH"
                    "dclistfiles $USER monthly $SERVER $PATH"
                )
                ;;
            2)
                [[ -z "$FILE_PATH" ]] && read -p "Enter file path: " FILE_PATH
                RESULT_COMMANDS=(
                    "dcviewfile $USER $SERVER daily $FILE_PATH"
                    "dcviewfile $USER $SERVER weekly $FILE_PATH"
                    "dcviewfile $USER $SERVER monthly $FILE_PATH"
                )
                ;;
            3)
                [[ -z "$PATH" ]] && read -p "Enter path to restore: " PATH
                [[ -z "$IGNORE_FLAG" ]] && read -p "Ignore existing files? (y/n): " IGNORE && [[ "$IGNORE" == "y" ]] && IGNORE_FLAG="--ignore-existing"
                [[ -z "$EXCLUDE_FLAG" ]] && read -p "Exclude folders? (comma-separated): " EXCLUDE && [[ -n "$EXCLUDE" ]] && EXCLUDE_FLAG="--exclude={$EXCLUDE}"
                [[ -z "$ARCHIVED" ]] && read -p "Is it archived? (y/n): " ARCHIVED && [[ "$ARCHIVED" == "y" ]] && read -p "Enter partition number: " PARTITION
                [[ -z "$NOTIFY_FLAG" ]] && read -p "Notify email? (leave empty for none): " NOTIFY && [[ -n "$NOTIFY" ]] && NOTIFY_FLAG="--notify=$NOTIFY"

                RESULT_COMMANDS=(
                    "dcrestorepath $USER $SERVER daily $PATH $IGNORE_FLAG $EXCLUDE_FLAG $NOTIFY_FLAG"
                    "dcrestorepath $USER $SERVER weekly $PATH $IGNORE_FLAG $EXCLUDE_FLAG $NOTIFY_FLAG"
                    "dcrestorepath $USER $SERVER monthly $PATH $IGNORE_FLAG $EXCLUDE_FLAG $NOTIFY_FLAG"
                )
                ;;
            4)
                [[ -z "$DBNAME" ]] && read -p "Enter database name: " DBNAME
                [[ -z "$ARCHIVED" ]] && read -p "Is it archived? (y/n): " ARCHIVED && [[ "$ARCHIVED" == "y" ]] && read -p "Enter partition number: " PARTITION
                RESULT_COMMANDS=(
                    "dcrestoremysqldb $USER $SERVER daily $DBNAME"
                    "dcrestoremysqldb $USER $SERVER weekly $DBNAME"
                    "dcrestoremysqldb $USER $SERVER monthly $DBNAME"
                )
                ;;
            5)
                [[ -z "$ARCHIVED" ]] && read -p "Is it archived? (y/n): " ARCHIVED && [[ "$ARCHIVED" == "y" ]] && read -p "Enter partition number: " PARTITION
                [[ -z "$NOTIFY_FLAG" ]] && read -p "Notify email? (leave empty for none): " NOTIFY && [[ -n "$NOTIFY" ]] && NOTIFY_FLAG="--notify=$NOTIFY"

                RESULT_COMMANDS=(
                    "dcfulldatarestore $USER daily $SERVER $NOTIFY_FLAG"
                    "dcfulldatarestore $USER weekly $SERVER $NOTIFY_FLAG"
                    "dcfulldatarestore $USER monthly $SERVER $NOTIFY_FLAG"
                )
                ;;
            6)  
                echo -e "${CYAN}Switching to a new domain...${RESET}"
                reset_data
                break  # Break out to restart domain selection
                ;;
            7)
                echo -e "${GREEN}Exiting backup tool. Goodbye!${RESET}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option! Try again.${RESET}"
                continue
                ;;
        esac

        # Display generated commands
        echo -e "\n${GREEN}Generated commands:${RESET}"
        for cmd in "${RESULT_COMMANDS[@]}"; do
            echo "$cmd"
        done

        echo -e "\n${YELLOW}Do you want to choose another option? (y/n)${RESET}"
        read -p "Enter choice: " CONTINUE
        [[ "$CONTINUE" != "y" ]] && break
    done
done
