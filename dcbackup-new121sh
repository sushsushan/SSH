#!/bin/bash

# Define Colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
WHITE="\033[1;37m"
RESET="\033[0m"

# Fetch domain details
OUTPUT=$(uapi DomainInfo domains_data)

# Extract domain and document root information
declare -A DOMAIN_PATHS

domain=""
documentroot=""
while read -r line; do
    if [[ $line =~ "domain:" ]]; then
        domain=$(echo "$line" | awk '{print $2}')
    elif [[ $line =~ "documentroot:" ]]; then
        documentroot=$(echo "$line" | awk '{print $2}')
        DOMAIN_PATHS[$domain]=$documentroot
    fi
done <<< "$OUTPUT"

# Fetch system details
USER=$(whoami)
SERVER=$(hostname)
DATE_TIME=$(date)

clear
echo -e "${GREEN}Welcome to the Backup Tool${RESET}"
echo -e "User: ${CYAN}$USER${RESET}"
echo -e "Server: ${CYAN}$SERVER${RESET}"
echo -e "Date & Time: ${CYAN}$DATE_TIME${RESET}"
echo

# User input for domain
while true; do
    read -p "Enter domain name: " DOMAIN
    PATH="${DOMAIN_PATHS[$DOMAIN]}"
    if [[ -n "$PATH" ]]; then
        echo -e "Detected document root: ${CYAN}$PATH${RESET}"
        read -p "Is this correct? (y/n): " CONFIRM
        [[ "$CONFIRM" == "y" ]] && break
    fi
    read -p "Enter path manually: " PATH
    break
done

while true; do
    echo -e "\n${YELLOW}Choose an option:${RESET}"
    echo "1) Confirm files"
    echo "2) View file"
    echo "3) Restore website"
    echo "4) Restore database"
    echo "5) Full restore"
    echo "6) Exit"
    read -p "Enter your choice: " OPTION

    case $OPTION in
        1)
            RESULT_COMMANDS=(
                "dclistfiles $USER daily $SERVER $PATH"
                "dclistfiles $USER weekly $SERVER $PATH"
                "dclistfiles $USER monthly $SERVER $PATH"
            )
            ;;
        2)
            read -p "Enter file path (e.g., public_html/wp-config.php): " FILE_PATH
            RESULT_COMMANDS=(
                "dcviewfile $USER $SERVER daily $FILE_PATH"
                "dcviewfile $USER $SERVER weekly $FILE_PATH"
                "dcviewfile $USER $SERVER monthly $FILE_PATH"
            )
            ;;
        3)
            read -p "Ignore existing files? (y/n): " IGNORE
            [[ "$IGNORE" == "y" ]] && IGNORE_FLAG="--ignore-existing"
            read -p "Exclude any folders? (comma-separated): " EXCLUDE
            [[ -n "$EXCLUDE" ]] && EXCLUDE_FLAG="--exclude={'$EXCLUDE'}"
            RESULT_COMMANDS=(
                "dcrestorepath $USER $SERVER daily $PATH $IGNORE_FLAG $EXCLUDE_FLAG"
                "dcrestorepath $USER $SERVER weekly $PATH $IGNORE_FLAG $EXCLUDE_FLAG"
                "dcrestorepath $USER $SERVER monthly $PATH $IGNORE_FLAG $EXCLUDE_FLAG"
            )
            ;;
        4)
            read -p "Enter database name: " DBNAME
            RESULT_COMMANDS=(
                "dcrestoremysqldb $USER $SERVER daily $DBNAME"
                "dcrestoremysqldb $USER $SERVER weekly $DBNAME"
                "dcrestoremysqldb $USER $SERVER monthly $DBNAME"
            )
            ;;
        5)
            RESULT_COMMANDS=(
                "dcfulldatarestore $USER daily $SERVER"
                "dcfulldatarestore $USER weekly $SERVER"
                "dcfulldatarestore $USER monthly $SERVER"
                "dcbackuprestore $USER daily $SERVER"
                "dcbackuprestore $USER weekly $SERVER"
                "dcbackuprestore $USER monthly $SERVER"
            )
            ;;
        6)
            echo -e "${GREEN}Exiting backup tool. Goodbye!${RESET}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid option! Please try again.${RESET}"
            continue
            ;;
    esac

    clear
    echo -e "\n${GREEN}Generated commands:${RESET}"
    for cmd in "${RESULT_COMMANDS[@]}"; do
        echo "$cmd"
    done

    read -p "Do you want to choose another option? (y/n): " CONTINUE
    [[ "$CONTINUE" != "y" ]] && break
done
