#!/bin/bash

# Function to generate a 4-digit random number
generate_random_number() {
    echo $((RANDOM % 9000 + 1000))
}

# Function to extract database credentials from wp-config.php
get_db_credentials() {
    local wp_path=$1
    DB_NAME=$(grep -oP "(?<=DB_NAME', ').*?(?=')" "$wp_path/wp-config.php")
    DB_USER=$(grep -oP "(?<=DB_USER', ').*?(?=')" "$wp_path/wp-config.php")
    DB_PASS=$(grep -oP "(?<=DB_PASSWORD', ').*?(?=')" "$wp_path/wp-config.php")
}

# Function to create a database and user
create_database() {
    local host_user=$(whoami)

    echo "1) System-generated DB name/user  2) Enter your own DB name/user"
    read -p "Choose (1/2): " choice

    if [[ "$choice" == "1" ]]; then
        DB_NAME="db_$(date +%s)"
        DB_USER="${host_user}_${DB_NAME}"
    else
        read -p "Enter DB name: " DB_NAME
        DB_USER="${host_user}_$DB_NAME"
    fi

    DB_PASS=$(openssl rand -base64 12)
    FULL_DB_NAME="${host_user}_${DB_NAME}"

    echo "Creating database..."
    uapi Mysql create_database name="$FULL_DB_NAME" >/dev/null 2>&1
    echo "Creating user..."
    uapi Mysql create_user name="$DB_USER" password="$DB_PASS" >/dev/null 2>&1
    echo "Setting privileges..."
    uapi Mysql set_privileges_on_database database="$FULL_DB_NAME" user="$DB_USER" privileges="ALL PRIVILEGES" >/dev/null 2>&1

    echo -e "Database: $FULL_DB_NAME\nUser: $DB_USER\nPassword: $DB_PASS"

    # Store DB details in global variables for later use
    NEW_DB_NAME=$FULL_DB_NAME
    NEW_DB_USER=$DB_USER
    NEW_DB_PASS=$DB_PASS
}

# Function to update wp-config.php with new DB credentials
update_wp_config() {
    local wp_config_path="$1/wp-config.php"

    sed -i "s/define( 'DB_NAME', .*/define( 'DB_NAME', '$NEW_DB_NAME' );/" "$wp_config_path"
    sed -i "s/define( 'DB_USER', .*/define( 'DB_USER', '$NEW_DB_USER' );/" "$wp_config_path"
    sed -i "s/define( 'DB_PASSWORD', .*/define( 'DB_PASSWORD', '$NEW_DB_PASS' );/" "$wp_config_path"

    echo "Updated wp-config.php with new database credentials."
}

# Function to backup database
backup_database() {
    local wp_path=$1
    local backup_folder=~/backup

    mkdir -p "$backup_folder"
    echo "Backing up database..."

    if wp db export "$backup_folder/db_backup.sql" --path="$wp_path" >/dev/null 2>&1; then
        echo "Database backup completed using WP-CLI."
    else
        echo "WP-CLI failed, falling back to MySQL dump..."

        DB_BACKUP_FILE="$backup_folder/${DB_NAME}_$(date +"%Y%m%d_%H%M%S").sql"
        uapi Mysql create_user name="$DB_USER" password="$DB_PASS" >/dev/null 2>&1
        uapi Mysql set_privileges_on_database database="$DB_NAME" user="$DB_USER" privileges="ALL PRIVILEGES" >/dev/null 2>&1

        mysqldump -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" > "$DB_BACKUP_FILE" 2>/dev/null

        uapi Mysql delete_user name="$DB_USER" >/dev/null 2>&1
        echo "Database backup saved at: $DB_BACKUP_FILE"
    fi
}

# Function to restore database
restore_database() {
    local backup_file=$1
    echo "Importing database backup to new database..."
    mysql -u "$NEW_DB_USER" -p"$NEW_DB_PASS" "$NEW_DB_NAME" < "$backup_file"
    echo "Database import completed."
}

# Start script execution
echo "=============================================="
echo "  Welcome to the Advanced Staging Creton Tool "
echo "=============================================="

echo "Scanning for installed WordPress sites..."
WP_DIRS=($(find ~ -type d -name "wp-admin" -exec dirname {} \; 2>/dev/null))

if [[ ${#WP_DIRS[@]} -eq 0 ]]; then
    echo "No WordPress installations found."
    exit 1
fi

echo "-------------------------------------------------------------"
printf "%-5s %-50s %-40s\n" "No." "Path" "Home URL"
echo "-------------------------------------------------------------"

for i in "${!WP_DIRS[@]}"; do
    SITE_URL=$(wp option get siteurl --path="${WP_DIRS[$i]}" 2>/dev/null)
    [[ -z "$SITE_URL" ]] && SITE_URL="(Could not retrieve URL)"
    printf "%-5s %-50s %-40s\n" "$((i+1))" "${WP_DIRS[$i]}" "$SITE_URL"
done
echo "-------------------------------------------------------------"

read -p "Enter the number corresponding to your WordPress installation: " selection
if ! [[ "$selection" =~ ^[0-9]+$ ]] || (( selection < 1 || selection > ${#WP_DIRS[@]} )); then
    echo "Invalid selection. Exiting."
    exit 1
fi

WP_PATH="${WP_DIRS[$((selection-1))]}"
echo "Selected WordPress Path: $WP_PATH"

# Get DB credentials from selected WordPress site
get_db_credentials "$WP_PATH"

# Backup existing database
backup_database "$WP_PATH"

# Create staging directory
STAGING_DIR="$WP_PATH/staging"
mkdir -p "$STAGING_DIR"
RANDOM_ID=$(generate_random_number)
STAGING_SUBDIR="$STAGING_DIR/$RANDOM_ID"
mkdir "$STAGING_SUBDIR"

# Copy WordPress files to staging directory
echo "Copying files to the staging site..."
rsync -av --exclude='staging' "$WP_PATH/" "$STAGING_SUBDIR/" --quiet
echo "Files copied successfully to: $STAGING_SUBDIR"

# Create new database and user
create_database

# Update wp-config.php of staging site
update_wp_config "$STAGING_SUBDIR"

# Restore database backup to new staging database
restore_database "$backup_folder/db_backup.sql"

echo "======================================"
echo "  Staging Site Created Successfully!  "
echo "======================================"
echo "Staging Path: $STAGING_SUBDIR"
echo "Database: $NEW_DB_NAME"
echo "User: $NEW_DB_USER"
echo "Password: $NEW_DB_PASS"
