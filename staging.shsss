#!/bin/bash

# Function to generate a 4-digit random number
generate_random_number() {
    echo $((RANDOM % 9000 + 1000))
}

# Welcome message
echo "=============================================="
echo "  Welcome to the Advanced Staging Creation Tool "
echo "=============================================="
echo ""
echo "This tool will create a staging copy of your WordPress site for safe testing."
echo ""

# List all installed WordPress directories
echo "Scanning for installed WordPress sites..."
WP_DIRS=($(find ~ -type d -name "wp-admin" -exec dirname {} \; 2>/dev/null))

if [[ ${#WP_DIRS[@]} -eq 0 ]]; then
    echo "No WordPress installations found."
    exit 1
fi

echo "Found the following WordPress installations:"
for i in "${!WP_DIRS[@]}"; do
    echo "$((i+1)). ${WP_DIRS[$i]}"
done

# Ask user to select a directory
read -p "Enter the number corresponding to your WordPress installation: " selection
if ! [[ "$selection" =~ ^[0-9]+$ ]] || (( selection < 1 || selection > ${#WP_DIRS[@]} )); then
    echo "Invalid selection. Exiting."
    exit 1
fi

WP_PATH="${WP_DIRS[$((selection-1))]}"
echo "You selected: $WP_PATH"

# Confirm WordPress installation
if [[ ! -f "$WP_PATH/wp-config.php" ]]; then
    echo "Error: No WordPress installation detected in $WP_PATH"
    exit 1
fi

# Extract database credentials from wp-config.php
DB_NAME=$(grep -oP "(?<=DB_NAME', ').*?(?=')" "$WP_PATH/wp-config.php")
DB_USER=$(grep -oP "(?<=DB_USER', ').*?(?=')" "$WP_PATH/wp-config.php")
DB_PASS=$(grep -oP "(?<=DB_PASSWORD', ').*?(?=')" "$WP_PATH/wp-config.php")
SITE_URL=$(wp option get siteurl --path="$WP_PATH" 2>/dev/null)

echo ""
echo "======================================"
echo "  WordPress Installation Details"
echo "======================================"
echo "Site URL      : $SITE_URL"
echo "Database Name : $DB_NAME"
echo "DB Username   : $DB_USER"
echo "DB Password   : $DB_PASS"
echo "======================================"

# Confirm with the user before proceeding
read -p "Do you want to create a staging site? (yes/no): " confirm
if [[ "$confirm" != "yes" ]]; then
    echo "Operation cancelled."
    exit 1
fi

# Create staging directory
STAGING_DIR="$WP_PATH/staging"
mkdir -p "$STAGING_DIR"

# Generate a unique 4-digit folder for staging
RANDOM_ID=$(generate_random_number)
STAGING_SUBDIR="$STAGING_DIR/$RANDOM_ID"
mkdir "$STAGING_SUBDIR"

# Copy files excluding existing staging directories
echo "Copying files to the staging site..."
rsync -av --exclude='staging' "$WP_PATH/" "$STAGING_SUBDIR/" --quiet

# Create backup folder
mkdir -p ~/backup

# Take database backup using wp-cli (if possible)
BACKUP_FILE="~/backup/$DB_NAME_$(date +"%Y%m%d_%H%M%S").sql"
echo "Attempting to take a backup using wp-cli..."

if wp db export "$BACKUP_FILE" --path="$WP_PATH"; then
    echo "Backup created successfully using wp-cli."
else
    echo "wp-cli backup failed. Falling back to MySQL dump method."

    # Take a MySQL backup
    USERNAME=$(whoami)
    DB_USER="${USERNAME}_$(openssl rand -hex 4)"
    DB_PASS=$(openssl rand -base64 12)
    
    echo "Creating temporary database user..."
    uapi Mysql create_user name="$DB_USER" password="$DB_PASS" >/dev/null 2>&1
    uapi Mysql set_privileges_on_database database="$DB_NAME" user="$DB_USER" privileges="ALL PRIVILEGES" >/dev/null 2>&1
    
    echo "Starting MySQL backup..."
    mysqldump -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" > "$BACKUP_FILE" 2>/dev/null
    
    uapi Mysql delete_user name="$DB_USER" >/dev/null 2>&1
    
    echo "Backup completed successfully using MySQL dump."
fi

# Create a new database and user for staging
HOST_USER=$(whoami)
NEW_DB_NAME="staging_${DB_NAME}_$(date +%s)"
NEW_DB_USER="${HOST_USER}_${NEW_DB_NAME}"
NEW_DB_PASS=$(openssl rand -base64 12)
FULL_NEW_DB_NAME="${HOST_USER}_${NEW_DB_NAME}"

echo "Creating a new database and user for staging..."
uapi Mysql create_database name="$FULL_NEW_DB_NAME" >/dev/null 2>&1
uapi Mysql create_user name="$NEW_DB_USER" password="$NEW_DB_PASS" >/dev/null 2>&1
uapi Mysql set_privileges_on_database database="$FULL_NEW_DB_NAME" user="$NEW_DB_USER" privileges="ALL PRIVILEGES" >/dev/null 2>&1

# Update wp-config.php in the staging site with new DB details
echo "Updating wp-config.php with new database details..."
sed -i "s/define('DB_NAME',.*/define('DB_NAME', '$FULL_NEW_DB_NAME');/" "$STAGING_SUBDIR/wp-config.php"
sed -i "s/define('DB_USER',.*/define('DB_USER', '$NEW_DB_USER');/" "$STAGING_SUBDIR/wp-config.php"
sed -i "s/define('DB_PASSWORD',.*/define('DB_PASSWORD', '$NEW_DB_PASS');/" "$STAGING_SUBDIR/wp-config.php"

# Import the database backup into the new staging database
echo "Importing the database backup into the new staging database..."
mysql -u "$NEW_DB_USER" -p"$NEW_DB_PASS" "$FULL_NEW_DB_NAME" < "$BACKUP_FILE"

# Inform the user of success
echo "======================================"
echo "  Staging Site Created Successfully!"
echo "======================================"
echo "Staging site created at: $STAGING_SUBDIR"
echo "The staging site is now connected to the new database."
echo "======================================"
