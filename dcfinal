#!/bin/bash

# Define Colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
WHITE="\033[1;37m"
RESET="\033[0m"

# Run the command and store output
OUTPUT=$(uapi DomainInfo domains_data)

# Column Widths
DOMAIN_WIDTH=35
ROOT_WIDTH=45
TYPE_WIDTH=15

# Print Table Header
printf "${WHITE}%-${DOMAIN_WIDTH}s %-${ROOT_WIDTH}s %-${TYPE_WIDTH}s${RESET}\n" \
       "--------------------------------------------------" \
       "---------------------------------------------" \
       "----------------"
printf "| ${CYAN}%-${DOMAIN_WIDTH}s${RESET} | ${CYAN}%-${ROOT_WIDTH}s${RESET} | ${CYAN}%-${TYPE_WIDTH}s${RESET} |\n" \
       "Domain Name" "Document Root" "Type"
printf "${WHITE}%-${DOMAIN_WIDTH}s %-${ROOT_WIDTH}s %-${TYPE_WIDTH}s${RESET}\n" \
       "--------------------------------------------------" \
       "---------------------------------------------" \
       "----------------"

# Counters
total=0
addon_count=0
subdomain_count=0
parked_count=0
primary_count=0

declare domain documentroot type

while read -r line; do
    case "$line" in
        *"domain:"*)
            domain=$(echo "$line" | awk '{print $2}')
            total=$((total + 1))
            ;;
        *"documentroot:"*)
            documentroot=$(echo "$line" | awk '{print $2}')
            ;;
        *"type:"*)
            type=$(echo "$line" | awk '{print $2}')
            case $type in
                "addon_domain") addon_count=$((addon_count + 1)); type_color=$YELLOW ;;
                "sub_domain") subdomain_count=$((subdomain_count + 1)); type_color=$BLUE ;;
                "parked_domain") parked_count=$((parked_count + 1)); type_color=$RED ;;
                "main_domain") primary_count=$((primary_count + 1)); type_color=$GREEN ;;
                *) type_color=$WHITE ;;
            esac
            printf "| %-${DOMAIN_WIDTH}s | %-${ROOT_WIDTH}s | ${type_color}%-${TYPE_WIDTH}s${RESET} |\n" \
                   "$domain" "$documentroot" "$type"
            ;;
    esac
done <<< "$OUTPUT"

# Print Table Footer
printf "${WHITE}%-${DOMAIN_WIDTH}s %-${ROOT_WIDTH}s %-${TYPE_WIDTH}s${RESET}\n" \
       "--------------------------------------------------" \
       "---------------------------------------------" \
       "----------------"


###################### BACKUP TOOL ######################

#!/bin/bash

# Define Colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
WHITE="\033[1;37m"
RESET="\033[0m"

# Fetch system details
USER=$(whoami)
SERVER=$(hostname)
DATE_TIME=$(date)

clear
echo -e "${GREEN}Welcome to the Backup Tool${RESET}"
echo -e "User: ${CYAN}$USER${RESET}"
echo -e "Server: ${CYAN}$SERVER${RESET}"
echo -e "Date & Time: ${CYAN}$DATE_TIME${RESET}\n"

declare ARCHIVED PARTITION IGNORE_FLAG EXCLUDE_FLAG NOTIFY_FLAG DOMAIN PATH FILE_PATH DBNAME

while true; do
    [[ -z "$DOMAIN" ]] && read -p "Enter domain name: " DOMAIN

    while true; do
        echo -e "\n${YELLOW}Choose an option:${RESET}"
        echo "1) Confirm files"
        echo "2) View file"
        echo "3) Restore website"
        echo "4) Restore database"
        echo "5) Full restore"
        echo "6) Exit"
        read -p "Enter your choice: " OPTION

        case $OPTION in
            1)
                [[ -z "$PATH" ]] && read -p "Enter path: " PATH
                RESULT_COMMANDS=(
                    "dclistfiles $USER daily $SERVER $PATH"
                    "dclistfiles $USER weekly $SERVER $PATH"
                    "dclistfiles $USER monthly $SERVER $PATH"
                )
                ;;
            2)
                [[ -z "$FILE_PATH" ]] && read -p "Enter file path: " FILE_PATH
                RESULT_COMMANDS=(
                    "dcviewfile $USER $SERVER daily $FILE_PATH"
                    "dcviewfile $USER $SERVER weekly $FILE_PATH"
                    "dcviewfile $USER $SERVER monthly $FILE_PATH"
                )
                ;;
            3)
                [[ -z "$PATH" ]] && read -p "Enter path to restore: " PATH
                RESULT_COMMANDS=(
                    "dcrestorepath $USER $SERVER daily $PATH"
                    "dcrestorepath $USER $SERVER weekly $PATH"
                    "dcrestorepath $USER $SERVER monthly $PATH"
                )
                ;;
            4)
                [[ -z "$DBNAME" ]] && read -p "Enter database name: " DBNAME
                RESULT_COMMANDS=(
                    "dcrestoremysqldb $USER $SERVER daily $DBNAME"
                    "dcrestoremysqldb $USER $SERVER weekly $DBNAME"
                    "dcrestoremysqldb $USER $SERVER monthly $DBNAME"
                )
                ;;
            5)
                RESULT_COMMANDS=(
                    "dcfulldatarestore $USER daily $SERVER"
                    "dcfulldatarestore $USER weekly $SERVER"
                    "dcfulldatarestore $USER monthly $SERVER"
                )
                ;;
            6)
                echo -e "${GREEN}Exiting backup tool. Goodbye!${RESET}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option! Please try again.${RESET}"
                continue
                ;;
        esac

        clear
        echo -e "\n${GREEN}Generated commands:${RESET}"
        for cmd in "${RESULT_COMMANDS[@]}"; do
            echo "$cmd"
        done

        echo -e "\n${YELLOW}Do you want to choose another option? (y/n)${RESET}"
        read -p "Enter choice: " CONTINUE
        [[ "$CONTINUE" != "y" ]] && break
    done
done
