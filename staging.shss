#!/bin/bash

# Function to generate a 4-digit random number
generate_random_number() {
    echo $((RANDOM % 9000 + 1000))
}

# Welcome message
echo "=============================================="
echo "  Welcome to the Advanced Staging Creton Tool "
echo "=============================================="
echo ""
echo "Staging allows you to test updates, plugins, and changes safely."
echo "This tool will create a staging copy of your WordPress site."
echo ""

# Ask user for the WordPress installation path
read -p "Enter the full path of your WordPress installation: " WP_PATH

# Validate path
if [[ ! -f "$WP_PATH/wp-config.php" ]]; then
    echo "Error: No WordPress installation detected at $WP_PATH"
    exit 1
fi

# Extract database credentials from wp-config.php
DB_NAME=$(grep -oP "(?<=DB_NAME', ').*?(?=')" "$WP_PATH/wp-config.php")
DB_USER=$(grep -oP "(?<=DB_USER', ').*?(?=')" "$WP_PATH/wp-config.php")
DB_PASS=$(grep -oP "(?<=DB_PASSWORD', ').*?(?=')" "$WP_PATH/wp-config.php")
SITE_URL=$(wp option get siteurl --path="$WP_PATH" 2>/dev/null)

# Display details
echo "======================================"
echo "  WordPress Installation Details"
echo "======================================"
echo "Site URL      : $SITE_URL"
echo "Database Name : $DB_NAME"
echo "DB Username   : $DB_USER"
echo "======================================"

# Confirm with user
read -p "Do you want to create a staging site? (yes/no): " confirm
if [[ "$confirm" != "yes" ]]; then
    echo "Operation cancelled."
    exit 1
fi

# Create staging directory
STAGING_DIR="$WP_PATH/staging"
mkdir -p "$STAGING_DIR"
RANDOM_ID=$(generate_random_number)
STAGING_SUBDIR="$STAGING_DIR/$RANDOM_ID"
mkdir "$STAGING_SUBDIR"

# Copy WordPress files to staging directory
rsync -av --exclude='staging' "$WP_PATH/" "$STAGING_SUBDIR/" --quiet

# Backup original database
BACKUP_DIR=~/backup
mkdir -p "$BACKUP_DIR"
BACKUP_FILE="$BACKUP_DIR/${DB_NAME}_$(date +"%Y%m%d_%H%M%S").sql"

if wp db export "$BACKUP_FILE" --path="$WP_PATH" 2>/dev/null; then
    echo "Database backup successful using WP-CLI."
else
    echo "WP-CLI failed, using mysqldump..."
    TEMP_DB_USER="$(whoami)_$(openssl rand -hex 4)"
    TEMP_DB_PASS="$(openssl rand -base64 12)"
    uapi Mysql create_user name="$TEMP_DB_USER" password="$TEMP_DB_PASS" >/dev/null 2>&1
    uapi Mysql set_privileges_on_database database="$DB_NAME" user="$TEMP_DB_USER" privileges="ALL PRIVILEGES" >/dev/null 2>&1
    mysqldump -u "$TEMP_DB_USER" -p"$TEMP_DB_PASS" "$DB_NAME" > "$BACKUP_FILE" 2>/dev/null
    uapi Mysql delete_user name="$TEMP_DB_USER" >/dev/null 2>&1
    echo "Backup completed successfully."
fi

# Create new database and user for staging site
HOST_USER=$(whoami)
STAGING_DB_NAME="db_$(date +%s)"
STAGING_DB_USER="${HOST_USER}_${STAGING_DB_NAME}"
STAGING_DB_PASS=$(openssl rand -base64 12)

uapi Mysql create_database name="$STAGING_DB_NAME" >/dev/null 2>&1
uapi Mysql create_user name="$STAGING_DB_USER" password="$STAGING_DB_PASS" >/dev/null 2>&1
uapi Mysql set_privileges_on_database database="$STAGING_DB_NAME" user="$STAGING_DB_USER" privileges="ALL PRIVILEGES" >/dev/null 2>&1

# Update wp-config.php in staging site
sed -i "s/define( 'DB_NAME', .*/define( 'DB_NAME', '$STAGING_DB_NAME' );/" "$STAGING_SUBDIR/wp-config.php"
sed -i "s/define( 'DB_USER', .*/define( 'DB_USER', '$STAGING_DB_USER' );/" "$STAGING_SUBDIR/wp-config.php"
sed -i "s/define( 'DB_PASSWORD', .*/define( 'DB_PASSWORD', '$STAGING_DB_PASS' );/" "$STAGING_SUBDIR/wp-config.php"

# Import database backup into new database
mysql -u "$STAGING_DB_USER" -p"$STAGING_DB_PASS" "$STAGING_DB_NAME" < "$BACKUP_FILE"

echo "======================================"
echo "  Staging Site Created Successfully!  "
echo "======================================"
echo "Path: $STAGING_SUBDIR"
echo "Database: $STAGING_DB_NAME"
echo "User: $STAGING_DB_USER"
echo "Password: $STAGING_DB_PASS"
