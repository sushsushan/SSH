#!/bin/bash

# Configurable Directories to scan
SCAN_DIRS=("/var/www" "/home" "/usr/local" "/tmp" "/var/tmp" "/etc")

# Malware signature patterns
MALWARE_PATTERNS=("base64_decode" "eval(" "exec(" "system(" "shell_exec(" "phpinfo(" "document.write" "/tmp/" "/var/tmp/" "phar://" "file_get_contents" "passthru(")

# Log file for storing results
LOG_FILE="/var/log/malware_scan.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# Function to scan files for suspicious patterns
scan_files_for_patterns() {
    echo "[$DATE] Scanning for suspicious patterns..." >> "$LOG_FILE"
    for dir in "${SCAN_DIRS[@]}"; do
        if [ -d "$dir" ]; then
            echo "[$DATE] Scanning directory: $dir" >> "$LOG_FILE"
            for pattern in "${MALWARE_PATTERNS[@]}"; do
                grep -r -l "$pattern" "$dir" >> "$LOG_FILE"
            done
        else
            echo "[$DATE] Directory not found: $dir" >> "$LOG_FILE"
        fi
    done
}

# Function to check file permissions for abnormalities
check_permissions() {
    echo "[$DATE] Checking file permissions..." >> "$LOG_FILE"
    find / -type f \( -perm -0777 -or -perm -0666 \) -exec ls -l {} \; >> "$LOG_FILE"
    find / -type d \( -perm -0777 \) -exec ls -ld {} \; >> "$LOG_FILE"
}

# Function to check for any open ports that shouldn't be there
check_open_ports() {
    echo "[$DATE] Checking open ports..." >> "$LOG_FILE"
    netstat -tuln >> "$LOG_FILE"
}

# Function to check for unauthorized cron jobs
check_cron_jobs() {
    echo "[$DATE] Checking for unauthorized cron jobs..." >> "$LOG_FILE"
    crontab -l >> "$LOG_FILE"
    ls /var/spool/cron/crontabs >> "$LOG_FILE"
}

# Function to scan for rootkits
check_rootkits() {
    echo "[$DATE] Checking for rootkits..." >> "$LOG_FILE"
    if command -v chkrootkit > /dev/null 2>&1; then
        chkrootkit >> "$LOG_FILE"
    else
        echo "[$DATE] chkrootkit not installed. Skipping rootkit check." >> "$LOG_FILE"
    fi
    if command -v rkhunter > /dev/null 2>&1; then
        rkhunter --check >> "$LOG_FILE"
    else
        echo "[$DATE] rkhunter not installed. Skipping rootkit check." >> "$LOG_FILE"
    fi
}

# Function to check for unusual file modifications (using find)
check_file_modifications() {
    echo "[$DATE] Checking for unusual file modifications..." >> "$LOG_FILE"
    find / -type f -mtime -7 -exec ls -l {} \; >> "$LOG_FILE"
}

# Function to scan log files for suspicious activities
scan_log_files() {
    echo "[$DATE] Scanning log files..." >> "$LOG_FILE"
    grep -i "error" /var/log/* >> "$LOG_FILE"
    grep -i "warning" /var/log/* >> "$LOG_FILE"
    grep -i "failed" /var/log/* >> "$LOG_FILE"
    grep -i "suspected" /var/log/* >> "$LOG_FILE"
}

# Function to scan the server for known malware signatures (e.g., with ClamAV)
scan_for_malware_signatures() {
    echo "[$DATE] Scanning for malware signatures..." >> "$LOG_FILE"
    if command -v clamscan > /dev/null 2>&1; then
        clamscan -r /var/www >> "$LOG_FILE"
    else
        echo "[$DATE] clamscan not installed. Skipping signature-based malware scan." >> "$LOG_FILE"
    fi
}

# Main function that runs all scans
main() {
    echo "[$DATE] Starting malware scan..." >> "$LOG_FILE"
    
    # Call all the functions to perform checks
    scan_files_for_patterns
    check_permissions
    check_open_ports
    check_cron_jobs
    check_rootkits
    check_file_modifications
    scan_log_files
    scan_for_malware_signatures

    echo "[$DATE] Malware scan completed." >> "$LOG_FILE"
}

# Execute the main function
main
