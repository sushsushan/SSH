#!/bin/bash

set -e  # Exit on error
LOG_FILE="wp_staging.log"

# Function to log messages
log_message() {
    echo -e "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to generate a 4-digit random number
generate_random_number() {
    echo $((RANDOM % 9000 + 1000))
}

# Welcome message
clear
echo "=============================================="
echo "  Welcome to the Advanced WordPress Staging Tool "
echo "=============================================="
echo "This tool creates a staging environment for your WordPress site safely."
echo ""

# Get WordPress installation path
read -p "Enter the full path of your WordPress installation: " WP_PATH

# Check if wp-config.php exists
if [[ ! -f "$WP_PATH/wp-config.php" ]]; then
    log_message "‚ùå Error: No WordPress installation detected in $WP_PATH."
    exit 1
fi

# Extract database credentials from wp-config.php
log_message "üîç Extracting database details from wp-config.php..."
DB_NAME=$(grep -oP "(?<=DB_NAME', ').*?(?=')" "$WP_PATH/wp-config.php")
DB_USER=$(grep -oP "(?<=DB_USER', ').*?(?=')" "$WP_PATH/wp-config.php")
DB_PASS=$(grep -oP "(?<=DB_PASSWORD', ').*?(?=')" "$WP_PATH/wp-config.php")
DB_HOST=$(grep -oP "(?<=DB_HOST', ').*?(?=')" "$WP_PATH/wp-config.php")

TABLE_PREFIX=$(grep -oP "(?<=table_prefix = ').*(?=')" "$WP_PATH/wp-config.php")
if [[ -z "$TABLE_PREFIX" ]]; then
    TABLE_PREFIX="wp_"  # Default prefix
fi

# Get site URL
OLD_HOME_URL=$(wp option get home --path="$WP_PATH" --allow-root)
OLD_SITE_URL=$(wp option get siteurl --path="$WP_PATH" --allow-root)

log_message "‚úÖ Current WordPress URLs:"
log_message "   Home URL: $OLD_HOME_URL"
log_message "   Site URL: $OLD_SITE_URL"

# Ask for confirmation
read -p "Do you want to create a staging site? (yes/no): " confirm
if [[ "$confirm" != "yes" ]]; then
    log_message "‚ö†Ô∏è Operation cancelled."
    exit 1
fi

# Create staging directory
STAGING_DIR="$WP_PATH/staging"
mkdir -p "$STAGING_DIR"

# Generate a unique 4-digit folder
RANDOM_ID=$(generate_random_number)
STAGING_SUBDIR="$STAGING_DIR/$RANDOM_ID"
mkdir "$STAGING_SUBDIR"

# Copy files excluding existing staging directories
log_message "üìÇ Copying files to the staging site..."
rsync -av --exclude='staging' --exclude='.git' --exclude='node_modules' "$WP_PATH/" "$STAGING_SUBDIR/" --quiet

# Backup database
log_message "üì¶ Creating database backup..."
BACKUP_FILE="$STAGING_SUBDIR/db_backup.sql"
mysqldump -u "$DB_USER" -p"$DB_PASS" -h "$DB_HOST" "$DB_NAME" > "$BACKUP_FILE"

# Create new database and user for staging
log_message "üîß Creating a new database for staging..."
HOST_USER=$(whoami)
NEW_DB_NAME="${HOST_USER}_db_$(date +%s)"
NEW_DB_USER="${HOST_USER}_${NEW_DB_NAME}"
NEW_DB_PASS=$(openssl rand -base64 12)

uapi Mysql create_database name="$NEW_DB_NAME" >/dev/null 2>&1
uapi Mysql create_user name="$NEW_DB_USER" password="$NEW_DB_PASS" >/dev/null 2>&1
uapi Mysql set_privileges_on_database database="$NEW_DB_NAME" user="$NEW_DB_USER" privileges="ALL PRIVILEGES" >/dev/null 2>&1

log_message "‚úÖ Database $NEW_DB_NAME created with user $NEW_DB_USER."

# Update wp-config.php in staging directory
sed -i "s/define('DB_NAME', .*/define('DB_NAME', '$NEW_DB_NAME');/" "$STAGING_SUBDIR/wp-config.php"
sed -i "s/define('DB_USER', .*/define('DB_USER', '$NEW_DB_USER');/" "$STAGING_SUBDIR/wp-config.php"
sed -i "s/define('DB_PASSWORD', .*/define('DB_PASSWORD', '$NEW_DB_PASS');/" "$STAGING_SUBDIR/wp-config.php"

# Import backup into new database
log_message "üì• Importing database backup into $NEW_DB_NAME..."
mysql -u "$NEW_DB_USER" -p"$NEW_DB_PASS" -h "$DB_HOST" "$NEW_DB_NAME" < "$BACKUP_FILE"

# Set new staging URL
STAGING_URL="${OLD_HOME_URL}/staging/$RANDOM_ID"
log_message "üîÑ Updating internal links for staging site..."
mysql -u "$NEW_DB_USER" -p"$NEW_DB_PASS" -h "$DB_HOST" -D "$NEW_DB_NAME" -e "
UPDATE ${TABLE_PREFIX}options SET option_value = '$STAGING_URL' WHERE option_name IN ('siteurl', 'home');
UPDATE ${TABLE_PREFIX}posts SET guid = REPLACE(guid, '$OLD_HOME_URL', '$STAGING_URL');
UPDATE ${TABLE_PREFIX}posts SET post_content = REPLACE(post_content, '$OLD_HOME_URL', '$STAGING_URL');
UPDATE ${TABLE_PREFIX}postmeta SET meta_value = REPLACE(meta_value, '$OLD_HOME_URL', '$STAGING_URL');
UPDATE ${TABLE_PREFIX}comments SET comment_content = REPLACE(comment_content, '$OLD_HOME_URL', '$STAGING_URL');
UPDATE ${TABLE_PREFIX}comments SET comment_author_url = REPLACE(comment_author_url, '$OLD_HOME_URL', '$STAGING_URL');
"

# Use WP-CLI to replace URLs in serialized data
log_message "‚ö° Running WP-CLI search-replace for deep updates..."
wp search-replace "$OLD_HOME_URL" "$STAGING_URL" --all-tables --allow-root --precise --recurse-objects | tee -a "$LOG_FILE"

log_message "‚úÖ Staging Site Created Successfully!"
log_message "Path: $STAGING_SUBDIR"
log_message "Database: $NEW_DB_NAME"
log_message "DB User: $NEW_DB_USER"
log_message "DB Password: $NEW_DB_PASS"
log_message "Staging URL: $STAGING_URL"
log_message "Now you can test your changes safely."

echo "=============================================="
echo "  üéâ Staging Site Created Successfully!"
echo "=============================================="
echo "Path: $STAGING_SUBDIR"
echo "Database: $NEW_DB_NAME"
echo "DB User: $NEW_DB_USER"
echo "DB Password: $NEW_DB_PASS"
echo "Staging URL: $STAGING_URL"
echo "Now you can test your changes safely."
echo "=============================================="
